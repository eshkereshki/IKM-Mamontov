class OfficialNode:
    """Узел для представления чиновника в иерархии министерства.

    Attributes:
        id (int): Уникальный идентификатор чиновника.
        bribe (float): Размер взятки, требуемый чиновником.
        __children (list[OfficialNode]): Список подчиненных чиновников.
    """

    def __init__(self, id, bribe):
        """Инициализирует узел чиновника."""
        self.id = id
        self.bribe = bribe
        self.__children = []

    def add_child(self, node):
        """Добавляет подчиненного чиновника"""
        self.__children.append(node)

    def get_children(self):
        """Возвращает список подчиненных."""
        return self.__children.copy()

    def __repr__(self):
        """Возвращает строковое представление узла.

        Returns:
            str: Строка в формате 'Official(ID={id}, Bribe={bribe})'.
        """
        return f"Official(ID={self.id}, Bribe={self.bribe})"


class MinistryHierarchy:
    """Класс для управления иерархией чиновников и расчета оптимального пути взяток.

    Attributes:
        __root (OfficialNode): Корневой узел иерархии (главный чиновник).
        _officials (dict[int, OfficialNode]): Словарь всех чиновников.
    """

    def __init__(self):
        """Инициализирует пустую иерархию чиновников."""
        self.__root = None
        self._officials = {}

    def add_official(self, id, bribe, boss_id):
        """Добавляет чиновника в иерархию.

        Args:
            id: Идентификатор чиновника.
            bribe: Размер взятки.
            boss_id: Идентификатор начальника ('0' для главного).

        Returns:
            bool: True если чиновник успешно добавлен, иначе False.

        Raises:
            ValueError: Если данные не прошли валидацию или чиновник уже существует.
        """
        try:
            id = self.__validate_id(id)
            bribe = self.__validate_bribe(bribe)
            boss_id = self.__validate_boss_id(boss_id)

            if id in self._officials:
                raise ValueError(f"Чиновник с ID {id} уже существует")

            new_official = OfficialNode(id, bribe)
            self._officials[id] = new_official

            if boss_id is None:
                if self.__root is not None:
                    raise ValueError("Главный чиновник уже назначен")
                self.__root = new_official
            else:
                if boss_id not in self._officials:
                    raise ValueError(f"Начальник с ID {boss_id} не найден")
                self._officials[boss_id].add_child(new_official)

            print(f"Чиновник {id} успешно добавлен")
            return True

        except ValueError as e:
            print(f"Ошибка: {e}")
            return False

    def __validate_id(self, id):
        """Проверяет валидность ID чиновника.

        Args:
            id: Идентификатор для проверки.

        Returns:
            int: Валидный числовой ID.

        Raises:
            ValueError: Если ID не является положительным целым числом.
        """
        try:
            id_num = int(id)
            if id_num <= 0:
                raise ValueError("ID должен быть положительным числом")
            return id_num
        except ValueError:
            raise ValueError("ID должен быть целым числом")

    def __validate_bribe(self, bribe):
        """Проверяет валидность размера взятки.

        Args:
            bribe: Размер взятки для проверки.

        Returns:
            float: Валидный размер взятки.

        Raises:
            ValueError: Если взятка не является числом или отрицательна.
        """
        try:
            bribe_num = float(bribe)
            if bribe_num < 0:
                raise ValueError("Размер взятки не может быть отрицательным")
            return bribe_num
        except ValueError:
            raise ValueError("Взятка должна быть числом (целым или дробным)")

    def __validate_boss_id(self, boss_id):
        """Проверяет валидность ID начальника.

        Args:
            boss_id: Идентификатор начальника для проверки.

        Returns:
            int | None: Валидный ID начальника или None для главного.

        Raises:
            ValueError: Если ID не соответствует требованиям.
        """
        if boss_id == "0":
            return None
        try:
            boss_id_num = int(boss_id)
            if boss_id_num <= 0:
                raise ValueError("ID начальника должен быть положительным")
            return boss_id_num
        except ValueError:
            raise ValueError("ID начальника должен быть числом (0 для главного)")

    def calculate_min_bribe(self):
        """Рассчитывает минимальную сумму взяток для получения лицензии.

        Returns:
            tuple[float, list[int]]: (минимальная сумма, список ID чиновников).

        Raises:
            ValueError: Если в министерстве нет чиновников.
        """
        if not self._officials or self.__root is None:
            raise ValueError("В министерстве нет чиновников")

        total, path = self.__calculate_path(self.__root)
        return (total, path[::-1])

    def __calculate_path(self, node):
        """Рекурсивно рассчитывает оптимальный путь для узла.

        Args:
            node (OfficialNode): Узел для расчета.

        Returns:
            tuple[float, list[int]]: (сумма взяток, список ID чиновников).
        """
        if not node.get_children():
            return (node.bribe, [node.id])

        children_results = []
        for child in node.get_children():
            child_bribe, child_path = self.__calculate_path(child)
            children_results.append((child_bribe, child_path))

        min_child_bribe, min_child_path = min(children_results, key=lambda x: x[0])

        if node.bribe < min_child_bribe:
            return (node.bribe, [node.id])
        else:
            return (node.bribe + min_child_bribe, [node.id] + min_child_path)

    def get_all_officials(self):
        """Возвращает информацию о всех чиновниках.

        Returns:
            dict[int, tuple[float, list[int]]]: Словарь в формате:
                {id: (bribe, [subordinate_ids])}
        """
        return {
            id: (node.bribe, [child.id for child in node.get_children()])
            for id, node in self._officials.items()
        }


def main():
    """Основная функция программы с пользовательским интерфейсом."""
    print("Программа для расчета минимальной взятки для получения лицензии")
    ministry = MinistryHierarchy()

    while True:
        print("\nМеню:")
        print("1. Добавить чиновника")
        print("2. Показать всех чиновников")
        print("3. Рассчитать минимальную взятку")
        print("4. Выйти")

        choice = input("Выберите пункт меню (1-4): ").strip()

        if choice == "1":
            print("\nДобавление чиновника")
            print("Формат ввода: ID,взятка,ID_начальника (0 для главного)")
            user_input = input("> ").strip()

            parts = user_input.split(',')
            if len(parts) != 3:
                print("Ошибка: нужно ввести ровно 3 значения через запятую")
                continue

            id, bribe, boss_id = parts
            ministry.add_official(id.strip(), bribe.strip(), boss_id.strip())

        elif choice == "2":
            print("\nСписок всех чиновников:")
            officials = ministry.get_all_officials()
            if not officials:
                print("В министерстве нет чиновников")
            else:
                for id, (bribe, subordinates) in officials.items():
                    subs = ", ".join(map(str, subordinates)) if subordinates else "нет"
                    print(f"ID: {id}, Взятка: {bribe} у.е., Подчинённые: {subs}")

        elif choice == "3":
            try:
                total, path = ministry.calculate_min_bribe()
                print(f"\nМинимальная сумма взятки: {total} у.е.")
                print("Оптимальный путь подписей:", " → ".join(map(str, path)))
            except ValueError as e:
                print(f"Ошибка: {e}")

        elif choice == "4":
            print("Выход из программы")
            break

        else:
            print("Некорректный выбор. Пожалуйста, выберите пункт от 1 до 4")


if __name__ == "__main__":
    main()
